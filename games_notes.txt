Needs:
- Users interatcing
	- Have users send messages to each other
- Scoreboard
- Profile page with wins
- Colorlovers to adjust pages
- Multiplayer
	- Use Javascript to update screen every X amount of seconds
	- check timestamp('is this the most recent timestamp')('created at timestamp')
	- check other users current board state

Tables:
- Users(has many)
	- First Name
	- Password
	- Age
	- Spirit Animal

- Hangman
	- Game ID
 	- User ID
 	- Word 
 	- Game state (shown on the screen first)
 	- # of wrong guesses 

- TicTacToe
	- User ID
	- win/lost


Hangman:
- User Interface(HTML/JS/CSS)
	- Main page needs (guess letter and lines for letters)
	- Guess
		- Letter is in word
			- Show ever instance
			- Then route back to guess OR to WIN
		- Letter is NOT in word
			- Add letter to list
			- Remove one life
			- Then route back to guess or to LOSE
		- Letter was already guessed
			- Message saying "Already guessed"
			- The route back to guess or to LOSE
- Front end logic(when they pick E what happens)
- Backend logic
	- Word should be on the server
Hints
	- find game id with #
	- check word for letter
	- respond with affected game state(update the DOM to show game state) and wrong letters
	- Canvas https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial

Junk notes
// function checkLetter(ltr) {
// 	var index = 0;
// 	for( i=0; i < chars.length; i++ ) {

// 		if(ltr === chars[i]) {
// 			array[index] = ltr; 
// 			console.log(array); 
// 		}
// 		index++;
// 	}
// }

get '/' do

  # Let's get some colors!
  api_response = HTTParty.get("http://www.colourlovers.com/api/palettes/random")
  @title = api_response['palettes']['palette']['title']
  @hexs = api_response['palettes']['palette']['colors']['hex']

  # Write it shakespeare!
  api_response = HTTParty.get("http://www.shakeitspeare.com/api/sentence")
  @sentence = api_response['sentence']

patch request
  state = game.game_state.dup
  state[idx] = letter
  game.game_state = state
  game.save



